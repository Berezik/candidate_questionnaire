import sys
import os
from PyQt6.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                             QSplitter, QListWidget, QLineEdit, QPushButton,
                             QGroupBox, QTabWidget, QMessageBox, QListWidgetItem,
                             QMenuBar, QStatusBar, QFileDialog, QDialog, QLabel,
                             QMenu)
from PyQt6.QtGui import QAction, QPixmap, QActionGroup
from PyQt6.QtCore import Qt, QDate, QSettings

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è —ñ–º–ø–æ—Ä—Ç—ñ–≤
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.database import DatabaseManager
from ui.personal_info_tab import PersonalInfoTab
from utils.exporters import PDFExporter, ExcelExporter
from utils.backup_manager import BackupManager, DataImporter
from utils.reports import StatisticsManager
from ui.styles import ThemeManager


class CandidateManagementApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ê–Ω–∫–µ—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è")
        self.setGeometry(100, 100, 1400, 800)
        self.current_candidate_id = None

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        self.db_manager = DatabaseManager()
        self.db_manager.init_db()

        # –î–æ–¥–∞—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ–º
        self.theme_manager = ThemeManager()

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—É —Ç–µ–º—É
        settings = QSettings("CandidateApp", "Questionnaire")
        saved_theme = settings.value("theme", "light")
        self.current_theme = saved_theme

        # –î–æ–¥–∞—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ —É—Ç–∏–ª—ñ—Ç
        self.backup_manager = BackupManager()
        self.data_importer = DataImporter()
        self.statistics_manager = StatisticsManager()

        self.init_ui()
        self.apply_theme(self.current_theme)
        self.refresh_list()

    def init_ui(self):
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π –≤—ñ–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # –û—Å–Ω–æ–≤–Ω–∏–π layout
        main_layout = QVBoxLayout(central_widget)

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫
        splitter = QSplitter(Qt.Orientation.Horizontal)

        # –õ—ñ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ - –ø–æ—à—É–∫ —ñ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤
        left_widget = self.create_left_panel()

        # –ü—Ä–∞–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ - –≤–∫–ª–∞–¥–∫–∏ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
        self.tab_widget = QTabWidget()
        self.personal_info_tab = PersonalInfoTab()
        self.tab_widget.addTab(self.personal_info_tab, "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")

        # –î–æ–¥–∞—î–º–æ —ñ–Ω—à—ñ –≤–∫–ª–∞–¥–∫–∏
        self.tab_widget.addTab(QWidget(), "–í—ñ–π—Å—å–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
        self.tab_widget.addTab(QWidget(), "–°—ñ–º–µ–π–Ω–∏–π —Å—Ç–∞–Ω")
        self.tab_widget.addTab(QWidget(), "–û—Å–≤—ñ—Ç–∞")
        self.tab_widget.addTab(QWidget(), "–ú–µ–¥–∏—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
        self.tab_widget.addTab(QWidget(), "–ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")

        # –î–æ–¥–∞—î–º–æ –≤—ñ–¥–∂–µ—Ç–∏ –≤ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫
        splitter.addWidget(left_widget)
        splitter.addWidget(self.tab_widget)
        splitter.setSizes([300, 1100])

        # –ö–Ω–æ–ø–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        save_widget = self.create_save_buttons()

        # –î–æ–¥–∞—î–º–æ –≤—Å–µ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ layout
        main_layout.addWidget(splitter)
        main_layout.addWidget(save_widget)

        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤
        self.connect_signals()

        # –î–æ–¥–∞—î–º–æ –º–µ–Ω—é
        self.create_menu_bar()

        # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.update_status_bar()

    def create_left_panel(self):
        left_widget = QWidget()
        left_widget.setMaximumWidth(350)
        left_layout = QVBoxLayout(left_widget)

        # –ü–æ–ª–µ –ø–æ—à—É–∫—É
        search_group = QGroupBox("–ü–æ—à—É–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
        search_layout = QVBoxLayout(search_group)
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("–ü–Ü–ë, —Ç–µ–ª–µ—Ñ–æ–Ω, –Ü–ü–ù, –ø–æ—Å–∞–¥–∞...")
        self.search_input.textChanged.connect(self.on_search_changed)
        search_layout.addWidget(self.search_input)

        # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤
        candidates_group = QGroupBox("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤")
        candidates_layout = QVBoxLayout(candidates_group)
        self.candidates_list = QListWidget()
        self.candidates_list.itemClicked.connect(self.on_candidate_selected)
        candidates_layout.addWidget(self.candidates_list)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        button_layout = QHBoxLayout()
        self.add_btn = QPushButton("–î–æ–¥–∞—Ç–∏")
        self.add_btn.setObjectName("primary-button")
        self.delete_btn = QPushButton("–í–∏–¥–∞–ª–∏—Ç–∏")
        self.delete_btn.setObjectName("destructive-button")
        self.refresh_btn = QPushButton("–û–Ω–æ–≤–∏—Ç–∏")
        self.refresh_btn.setObjectName("secondary-button")
        self.clear_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç–∏")
        self.clear_btn.setObjectName("secondary-button")

        button_layout.addWidget(self.add_btn)
        button_layout.addWidget(self.delete_btn)
        button_layout.addWidget(self.refresh_btn)
        button_layout.addWidget(self.clear_btn)

        left_layout.addWidget(search_group)
        left_layout.addWidget(candidates_group)
        left_layout.addLayout(button_layout)

        return left_widget

    def create_save_buttons(self):
        save_widget = QWidget()
        save_layout = QHBoxLayout(save_widget)
        self.save_btn = QPushButton("–ó–±–µ—Ä–µ–≥—Ç–∏")
        self.save_btn.setObjectName("primary-button")
        self.save_new_btn = QPushButton("–ó–±–µ—Ä–µ–≥—Ç–∏ —Ç–∞ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ")
        self.save_new_btn.setObjectName("primary-button")
        save_layout.addWidget(self.save_btn)
        save_layout.addWidget(self.save_new_btn)
        save_layout.addStretch()
        return save_widget

    def create_menu_bar(self):
        menu_bar = QMenuBar()

        # –ú–µ–Ω—é –§–∞–π–ª
        file_menu = QMenu("–§–∞–π–ª", self)

        export_pdf_action = QAction("–ï–∫—Å–ø–æ—Ä—Ç –≤ PDF", self)
        export_pdf_action.triggered.connect(self.export_to_pdf)
        file_menu.addAction(export_pdf_action)

        export_excel_action = QAction("–ï–∫—Å–ø–æ—Ä—Ç –≤ Excel", self)
        export_excel_action.triggered.connect(self.export_to_excel)
        file_menu.addAction(export_excel_action)

        file_menu.addSeparator()

        backup_action = QAction("–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é", self)
        backup_action.triggered.connect(self.create_backup)
        file_menu.addAction(backup_action)

        restore_action = QAction("–í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó", self)
        restore_action.triggered.connect(self.restore_backup)
        file_menu.addAction(restore_action)

        file_menu.addSeparator()

        import_action = QAction("–Ü–º–ø–æ—Ä—Ç –∑ Excel", self)
        import_action.triggered.connect(self.import_from_excel)
        file_menu.addAction(import_action)

        file_menu.addSeparator()

        exit_action = QAction("–í–∏—Ö—ñ–¥", self)
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)

        # –ú–µ–Ω—é –í–∏–≥–ª—è–¥
        view_menu = QMenu("–í–∏–≥–ª—è–¥", self)

        self.light_theme_action = QAction("üåû –°–≤—ñ—Ç–ª–∞ —Ç–µ–º–∞", self)
        self.light_theme_action.triggered.connect(lambda: self.apply_theme("light"))
        self.light_theme_action.setCheckable(True)

        self.dark_theme_action = QAction("üåô –¢–µ–º–Ω–∞ —Ç–µ–º–∞", self)
        self.dark_theme_action.triggered.connect(lambda: self.apply_theme("dark"))
        self.dark_theme_action.setCheckable(True)

        # –ì—Ä—É–ø—É—î–º–æ –¥—ñ—ó —Ç–µ–º–∏
        theme_group = QActionGroup(self)
        theme_group.addAction(self.light_theme_action)
        theme_group.addAction(self.dark_theme_action)
        theme_group.setExclusive(True)

        view_menu.addAction(self.light_theme_action)
        view_menu.addAction(self.dark_theme_action)

        # –ú–µ–Ω—é –ó–≤—ñ—Ç–∏
        reports_menu = QMenu("–ó–≤—ñ—Ç–∏", self)

        stats_action = QAction("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", self)
        stats_action.triggered.connect(self.show_statistics)
        reports_menu.addAction(stats_action)

        # –î–æ–¥–∞—î–º–æ –º–µ–Ω—é –¥–æ –º–µ–Ω—é –±–∞—Ä—É
        menu_bar.addMenu(file_menu)
        menu_bar.addMenu(view_menu)
        menu_bar.addMenu(reports_menu)

        self.setMenuBar(menu_bar)

        # –û–Ω–æ–≤–ª—é—î–º–æ –≤–∏–±—ñ—Ä —Ç–µ–º–∏ –≤ –º–µ–Ω—é
        self.update_theme_menu()

    def update_theme_menu(self):
        self.light_theme_action.setChecked(self.current_theme == "light")
        self.dark_theme_action.setChecked(self.current_theme == "dark")

    def connect_signals(self):
        self.add_btn.clicked.connect(self.add_candidate)
        self.delete_btn.clicked.connect(self.delete_candidate)
        self.refresh_btn.clicked.connect(self.refresh_list)
        self.clear_btn.clicked.connect(self.clear_form)
        self.save_btn.clicked.connect(self.save_candidate)
        self.save_new_btn.clicked.connect(self.save_and_new_candidate)

    def apply_theme(self, theme_name):
        self.current_theme = theme_name
        theme_manager = ThemeManager()

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä —Ç–µ–º–∏
        settings = QSettings("CandidateApp", "Questionnaire")
        settings.setValue("theme", theme_name)

        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø–∞–ª—ñ—Ç—Ä—É –∫–æ–ª—å–æ—Ä—ñ–≤
        if theme_name == "dark":
            self.setPalette(theme_manager.get_dark_theme())
        else:
            self.setPalette(theme_manager.get_light_theme())

        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Å—Ç–∏–ª—ñ
        self.setStyleSheet(theme_manager.get_stylesheet(theme_name))

        # –û–Ω–æ–≤–ª—é—î–º–æ –≤–∏–±—ñ—Ä —É –º–µ–Ω—é
        self.update_theme_menu()

        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –±–∞—Ä
        self.update_status_bar()

        print(f"–ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —Ç–µ–º—É: {theme_name}")

    def add_candidate(self):
        self.clear_form()
        self.current_candidate_id = None
        self.candidates_list.clearSelection()
        print("–†–µ–∂–∏–º –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")

    def delete_candidate(self):
        if not self.candidates_list.currentItem():
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
            return

        candidate_id = self.candidates_list.currentItem().data(Qt.ItemDataRole.UserRole)

        reply = QMessageBox.question(
            self, "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
            "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—å–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )

        if reply == QMessageBox.StandardButton.Yes:
            if self.db_manager.delete_candidate(candidate_id):
                QMessageBox.information(self, "–£—Å–ø—ñ—Ö", "–ö–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ")
                self.refresh_list()
            else:
                QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")

    def refresh_list(self):
        self.candidates_list.clear()
        candidates = self.db_manager.get_all_candidates()
        if not candidates:
            print("–í –±–∞–∑—ñ –¥–∞–Ω–∏—Ö —â–µ –Ω–µ–º–∞—î –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤")
            self.update_status_bar()
            return

        for candidate in candidates:
            item_text = f"{candidate.last_name} {candidate.first_name}"
            if candidate.middle_name:
                item_text += f" {candidate.middle_name}"
            item = QListWidgetItem(item_text)
            item.setData(Qt.ItemDataRole.UserRole, candidate.id)
            self.candidates_list.addItem(item)

        self.update_status_bar()

    def update_status_bar(self):
        count = self.statistics_manager.get_candidate_count()
        self.status_bar.showMessage(f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤: {count}")

    def on_search_changed(self):
        search_term = self.search_input.text().strip()
        if not search_term:
            self.refresh_list()
            return

        self.candidates_list.clear()
        candidates = self.db_manager.search_candidates(search_term)
        for candidate in candidates:
            item_text = f"{candidate.last_name} {candidate.first_name}"
            if candidate.middle_name:
                item_text += f" {candidate.middle_name}"
            item = QListWidgetItem(item_text)
            item.setData(Qt.ItemDataRole.UserRole, candidate.id)
            self.candidates_list.addItem(item)

    def on_candidate_selected(self, item):
        candidate_id = item.data(Qt.ItemDataRole.UserRole)
        self.current_candidate_id = candidate_id

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        candidate, phones = self.db_manager.get_candidate_by_id(candidate_id)
        if candidate:
            self.load_candidate_data(candidate, phones)

    def load_candidate_data(self, candidate, phones):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —É —Ñ–æ—Ä–º—É"""
        from PyQt6.QtGui import QPixmap

        # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        self.personal_info_tab.last_name_input.setText(candidate.last_name or "")
        self.personal_info_tab.first_name_input.setText(candidate.first_name or "")
        self.personal_info_tab.middle_name_input.setText(candidate.middle_name or "")
        self.personal_info_tab.tax_number_input.setText(candidate.tax_number or "")

        if candidate.birth_date:
            from PyQt6.QtCore import QDate
            self.personal_info_tab.birth_date_edit.setDate(
                QDate(candidate.birth_date.year, candidate.birth_date.month, candidate.birth_date.day))

        self.personal_info_tab.birth_place_input.setText(candidate.birth_place or "")

        # –°—Ç–∞—Ç—å
        if candidate.gender:
            if candidate.gender.value == "–ß–æ–ª–æ–≤—ñ–∫":
                self.personal_info_tab.gender_male.setChecked(True)
            else:
                self.personal_info_tab.gender_female.setChecked(True)

        # –î–æ–∫—É–º–µ–Ω—Ç–∏
        if candidate.document_type:
            if candidate.document_type.value == "passport":
                self.personal_info_tab.passport_rb.setChecked(True)
                self.personal_info_tab.passport_series_input.setText(candidate.passport_series or "")
                self.personal_info_tab.passport_number_input.setText(candidate.passport_number or "")
                self.personal_info_tab.passport_issued_input.setText(candidate.passport_issued_by or "")
                if candidate.passport_issue_date:
                    from PyQt6.QtCore import QDate
                    self.personal_info_tab.passport_issue_date.setDate(
                        QDate(candidate.passport_issue_date.year, candidate.passport_issue_date.month,
                              candidate.passport_issue_date.day))
            else:
                self.personal_info_tab.id_card_rb.setChecked(True)
                self.personal_info_tab.id_number_input.setText(candidate.id_card_number or "")
                self.personal_info_tab.id_issued_by_input.setText(candidate.id_card_issued_by or "")
                if candidate.id_card_issue_date:
                    from PyQt6.QtCore import QDate
                    self.personal_info_tab.id_issue_date.setDate(
                        QDate(candidate.id_card_issue_date.year, candidate.id_card_issue_date.month,
                              candidate.id_card_issue_date.day))

        # –ê–¥—Ä–µ—Å–∏
        self.personal_info_tab.registration_address_input.setPlainText(candidate.registration_address or "")
        self.personal_info_tab.actual_address_input.setPlainText(candidate.actual_address or "")

        # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        self.personal_info_tab.email_input.setText(candidate.email or "")

        # –¢–µ–ª–µ—Ñ–æ–Ω–∏
        if phones:
            if len(phones) > 0:
                self.personal_info_tab.phone_input.setText(phones[0].phone_number or "")
            if len(phones) > 1:
                self.personal_info_tab.phone2_input.setText(phones[1].phone_number or "")
                self.personal_info_tab.phone2_input.setVisible(True)
                self.personal_info_tab.add_phone_btn.setEnabled(False)

        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        self.personal_info_tab.nationality_input.setText(candidate.nationality or "")
        self.personal_info_tab.citizenship_input.setText(candidate.citizenship or "")
        self.personal_info_tab.vpo_status_input.setText(candidate.vpo_status or "")

        if candidate.religion_forbids_weapons is not None:
            self.personal_info_tab.religion_forbids_weapons.setChecked(candidate.religion_forbids_weapons)

        # –†–µ–ª—ñ–≥—ñ—è
        if candidate.religion:
            religion_index = self.personal_info_tab.religion_combo.findText(candidate.religion.value)
            if religion_index >= 0:
                self.personal_info_tab.religion_combo.setCurrentIndex(religion_index)
                if candidate.religion.value == "–Ü–Ω—à–µ" and candidate.alternative_religion:
                    self.personal_info_tab.alternative_religion_input.setText(candidate.alternative_religion)
                    self.personal_info_tab.alternative_religion_input.setVisible(True)

        # –ë–∞–Ω–∫—ñ–≤—Å—å–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        if candidate.bank_name:
            bank_index = self.personal_info_tab.bank_combo.findText(candidate.bank_name)
            if bank_index >= 0:
                self.personal_info_tab.bank_combo.setCurrentIndex(bank_index)

        self.personal_info_tab.iban_input.setText(candidate.iban or "")

        if candidate.has_credit is not None:
            self.personal_info_tab.has_credit_check.setChecked(candidate.has_credit)

        # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        self.personal_info_tab.driver_license_input.setText(candidate.driver_license or "")
        self.personal_info_tab.vehicle_input.setText(candidate.personal_vehicle or "")

        if candidate.extreme_driving_experience is not None:
            self.personal_info_tab.extreme_driving_check.setChecked(candidate.extreme_driving_experience)

        # –§–æ—Ç–æ
        if candidate.photo_path and os.path.exists(candidate.photo_path):
            self.personal_info_tab.photo_path = candidate.photo_path
            pixmap = QPixmap(candidate.photo_path)
            if not pixmap.isNull():
                from PyQt6.QtCore import Qt
                scaled_pixmap = pixmap.scaled(150, 200, Qt.AspectRatioMode.KeepAspectRatio,
                                              Qt.TransformationMode.SmoothTransformation)
                self.personal_info_tab.photo_label.setPixmap(scaled_pixmap)

    def clear_form(self):
        self.personal_info_tab.clear_form()

    def save_candidate(self):
        """
        –ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        """
        try:
            print("–ü–æ—á–∞—Ç–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞...")

            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ —Ñ–æ—Ä–º–∏
            candidate_data = self.personal_info_tab.get_form_data()
            if not candidate_data:
                print("–î–∞–Ω—ñ —Ñ–æ—Ä–º–∏ –Ω–µ –≤–∞–ª—ñ–¥–Ω—ñ –∞–±–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
                return

            print(f"–û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {candidate_data.keys()}")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
            if not candidate_data.get('last_name') or not candidate_data.get('first_name') or not candidate_data.get(
                    'tax_number'):
                QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: –ü—Ä—ñ–∑–≤–∏—â–µ, –Ü–º'—è, –†–ù–û–ö–ü–ü(–Ü–ü–ù)")
                return

            try:
                if self.current_candidate_id:
                    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                    print(f"–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∑ ID: {self.current_candidate_id}")
                    if self.db_manager.update_candidate(self.current_candidate_id, candidate_data):
                        QMessageBox.information(self, "–£—Å–ø—ñ—Ö", "–î–∞–Ω—ñ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ")
                        print("–ö–∞–Ω–¥–∏–¥–∞—Ç —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π")
                        self.refresh_list()
                    else:
                        QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
                        print("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
                else:
                    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                    print("–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
                    candidate_id = self.db_manager.add_candidate(candidate_data)
                    if candidate_id:
                        QMessageBox.information(self, "–£—Å–ø—ñ—Ö", "–ö–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
                        print(f"–ö–∞–Ω–¥–∏–¥–∞—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π –∑ ID: {candidate_id}")
                        self.refresh_list()
                    else:
                        QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
                        print("–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")

            except Exception as db_error:
                print(f"–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {db_error}")
                QMessageBox.critical(
                    self,
                    "–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö",
                    f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö:\n{str(db_error)}"
                )

        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ save_candidate: {e}")
            import traceback
            error_details = traceback.format_exc()
            print(f"Traceback: {error_details}")

            QMessageBox.critical(
                self,
                "–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞",
                f"–°—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:\n{str(e)}\n\n–î–µ—Ç–∞–ª—ñ:\n{error_details}"
            )

    def save_and_new_candidate(self):
        self.save_candidate()
        self.add_candidate()

    def export_to_pdf(self):
        if not self.current_candidate_id:
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É")
            return

        file_path, _ = QFileDialog.getSaveFileName(
            self, "–ó–±–µ—Ä–µ–≥—Ç–∏ PDF", f"candidate_{self.current_candidate_id}.pdf", "PDF Files (*.pdf)"
        )

        if file_path:
            candidate, phones = self.db_manager.get_candidate_by_id(self.current_candidate_id)
            if candidate:
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –æ–±'—î–∫—Ç candidate —É —Å–ª–æ–≤–Ω–∏–∫
                candidate_dict = {}
                for column in candidate.__table__.columns:
                    value = getattr(candidate, column.name)
                    candidate_dict[column.name] = value

                # –î–æ–¥–∞—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∏
                candidate_dict['phones'] = [phone.phone_number for phone in phones]

                exporter = PDFExporter()
                if exporter.export_candidate_to_pdf(candidate_dict, file_path):
                    QMessageBox.information(self, "–£—Å–ø—ñ—Ö", "PDF —É—Å–ø—ñ—à–Ω–æ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
                else:
                    QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ PDF")

    def export_to_excel(self):
        file_path, _ = QFileDialog.getSaveFileName(
            self, "–ó–±–µ—Ä–µ–≥—Ç–∏ Excel", "candidates.xlsx", "Excel Files (*.xlsx)"
        )

        if file_path:
            exporter = ExcelExporter()
            if exporter.export_all_to_excel(file_path):
                QMessageBox.information(self, "–£—Å–ø—ñ—Ö", "Excel —É—Å–ø—ñ—à–Ω–æ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
            else:
                QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ Excel")

    def create_backup(self):
        success, message = self.backup_manager.create_backup()
        if success:
            QMessageBox.information(self, "–£—Å–ø—ñ—Ö", message)
        else:
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", message)

    def restore_backup(self):
        backups = self.backup_manager.get_backup_files()
        if not backups:
            QMessageBox.information(self, "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π")
            return

        file_path, _ = QFileDialog.getOpenFileName(
            self, "–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é", self.backup_manager.backup_dir, "Backup Files (*.db)"
        )

        if file_path:
            reply = QMessageBox.question(
                self, "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
                "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –∑ —Ü—ñ—î—ó —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó? –ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –≤—Ç—Ä–∞—á–µ–Ω—ñ.",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )

            if reply == QMessageBox.StandardButton.Yes:
                success, message = self.backup_manager.restore_backup(file_path)
                if success:
                    QMessageBox.information(self, "–£—Å–ø—ñ—Ö", message)
                    self.refresh_list()
                else:
                    QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", message)

    def import_from_excel(self):
        file_path, _ = QFileDialog.getOpenFileName(
            self, "–í—ñ–¥–∫—Ä–∏—Ç–∏ Excel", "", "Excel Files (*.xlsx *.xls)"
        )

        if file_path:
            success, message = self.data_importer.import_from_excel(file_path)
            if success:
                QMessageBox.information(self, "–£—Å–ø—ñ—Ö", message)
                self.refresh_list()
            else:
                QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", message)

    def show_statistics(self):
        stats_dialog = QDialog(self)
        stats_dialog.setWindowTitle("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤")
        stats_dialog.setMinimumSize(600, 400)

        layout = QVBoxLayout()

        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_count = self.statistics_manager.get_candidate_count()
        count_label = QLabel(f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤: {total_count}")
        count_label.setStyleSheet("font-size: 14px; font-weight: bold; margin: 10px;")
        layout.addWidget(count_label)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—Ç–∞—Ç—Ç—é
        gender_stats = self.statistics_manager.get_gender_stats()
        if gender_stats:
            gender_label = QLabel("–†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ —Å—Ç–∞—Ç—Ç—é:")
            gender_label.setStyleSheet("font-size: 12px; font-weight: bold; margin: 5px;")
            layout.addWidget(gender_label)

            for gender, count in gender_stats.items():
                gender_info = QLabel(f"{gender}: {count} –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤")
                layout.addWidget(gender_info)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–∞—Ç–æ—é
        date_stats = self.statistics_manager.get_candidates_by_date(30)
        if date_stats:
            date_label = QLabel("–ö–∞–Ω–¥–∏–¥–∞—Ç–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤:")
            date_label.setStyleSheet("font-size: 12px; font-weight: bold; margin: 5px;")
            layout.addWidget(date_label)

            for date, count in date_stats.items():
                date_info = QLabel(f"{date}: {count} –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤")
                layout.addWidget(date_info)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è
        close_btn = QPushButton("–ó–∞–∫—Ä–∏—Ç–∏")
        close_btn.setObjectName("primary-button")
        close_btn.clicked.connect(stats_dialog.accept)
        layout.addWidget(close_btn)

        stats_dialog.setLayout(layout)
        stats_dialog.exec()


# –î–æ–¥–∞—î–º–æ —Ü–µ–π –±–ª–æ–∫ –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ñ–∞–π–ª—É –Ω–∞–ø—Ä—è–º—É
if __name__ == "__main__":
    # –î–æ–¥–∞—î–º–æ —à–ª—è—Ö–∏ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—ñ–≤
    import sys
    import os

    sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

    from PyQt6.QtWidgets import QApplication

    app = QApplication(sys.argv)
    window = CandidateManagementApp()
    window.show()
    sys.exit(app.exec())